
----------------------------------------------------------------

    General Hints on Demo Program ConfigCAN1

    (Demo Program for configuration of static instanance CAN1)

----------------------------------------------------------------


This demo program shows how to configure the Object Dictionary of
the CAN1 interface (static Object Dictionary) by a PLC program,
using the SDO Function blocks.

This demo program requires the following devices:

- A PLC with a static CANopen interface, such as PLCcore-5484 (CAN1),
  PLCmodule-C14 (CAN1) or PLCmodule-C32 (CAN1)
  Node address (CAN1): 30H
  Master mode:         ON  (except there is an other dedicated
                            CANopen Master in this network)

- A CANopen I/O module such as the CANopen Chip-F40, configured to
  CANopen specific Predefined Connection Set
  Node address: 40H




The configuration of the static local Object Dictionary is done in the
Startup task 'SetupCAN1.ST'. There are 2 PDOs configured as follows:

RPDO1:  Used to receive the TPDO1 from the CANopen I/O module with
        following configuration:

        CANID:      1C0H  (180H + NodeID)
        Mapping:    2 Bytes are used
                        1. Byte is mapped to Index=2000/Sub1
                            -> 'bCAN1InByte0 AT %MB0.0'
                        2. Byte is mapped to Index=2000/Sub2
                            -> 'bCAN1InByte1 AT %MB1.0'


TPDO1:  Used to transmit data, corresponding to the RPDO1 of the CANopen
        I/O module with following configuration:

        CANID:      240H  (200H + NodeID)
        Mapping:    1 Byte is used
                        1. Byte is mapped to Index=2030/Sub1
                            -> 'bCAN1OutByte0 AT %MB256.0'




After the Startup task ('SetupCAN1.ST') has done the configuration, the PLC
will enter the Main task ('Main.ST'). Within the cyclic main task the first
byte of a received PDO (with CANID 1C0H) is copied to the first byte of the
TPDO and transmitted back as "echo" to the CANopen I/O module (with
CANID 240H):

    bCAN1OutByte0 := bCAN1InByte0;

This leads to an "echo" on the CANopen device, that means, if an input is
set on the device, then the corresponding output will be also set by this
"echo".


-----------------------------------------------------------------------------

    General hints to the PDO configuration process:

-----------------------------------------------------------------------------

The configuration process requires the following steps, according to
CANopen standard:

(1) Disable PDO by setting Bit31 in CANID
    (1a) Read currently configured CANID
    (1b) Set Bit31
    (1c) Write back the CANID read in step (1a) with Bit31 set
    IMPORTANT: The CANID used in step (1c) *MUST BE* the same CANID
               read in step (1a) with Bit31 set! Otherwise the
               PDO will be locked and all follwing steps will fail!

(2) Delete old mapping by setting Sub0 of PDO mapping index to 0

(3) Define new mapping of PDO

(4) Enable new mapping by setting number of configured objects

(5) Enable PDO by setting valid (new) CANID
    The CANID used in this configuration step can be different from
    the CANID used in step (1) to unlock the PDO.



